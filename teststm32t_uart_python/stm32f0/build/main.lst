ARM GAS  /tmp/ccZBciSD.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB46:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccZBciSD.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** UART_HandleTypeDef huart1;
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE BEGIN PV */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PV */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  50:Core/Src/main.c **** void SystemClock_Config(void);
  51:Core/Src/main.c **** static void MX_GPIO_Init(void);
  52:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  53:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PFP */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  58:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** #if defined(__GNUC__)
  61:Core/Src/main.c **** int _write(int fd, char *ptr, int len)
  62:Core/Src/main.c **** {
  63:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
  64:Core/Src/main.c ****     return len;
  65:Core/Src/main.c **** }
  66:Core/Src/main.c **** #elif defined(__ICCARM__)
  67:Core/Src/main.c **** #include "LowLevelIOInterface.h"
  68:Core/Src/main.c **** size_t __write(int handle, const unsigned char *buffer, size_t size)
  69:Core/Src/main.c **** {
  70:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t *)buffer, size, HAL_MAX_DELAY);
  71:Core/Src/main.c ****     return size;
  72:Core/Src/main.c **** }
  73:Core/Src/main.c **** #elif defined(__CC_ARM)
  74:Core/Src/main.c **** int fputc(int ch, FILE *f)
  75:Core/Src/main.c **** {
  76:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  77:Core/Src/main.c ****     return ch;
  78:Core/Src/main.c **** }
  79:Core/Src/main.c **** #endif
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** #define MAX_BUFFER_SIZE 100
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** char Rx_data[2], Rx_Buffer[MAX_BUFFER_SIZE];
  84:Core/Src/main.c **** uint8_t Transfer_cplt, Rx_indx = 0;
  85:Core/Src/main.c **** uint8_t errorcode = 0, maintask = 0;
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** uint8_t decode_cmd()
  88:Core/Src/main.c **** {
  89:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
  90:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
ARM GAS  /tmp/ccZBciSD.s 			page 3


  91:Core/Src/main.c ****     if (strcmp(Rx_Buffer, "blink1") == 0)
  92:Core/Src/main.c ****     {
  93:Core/Src/main.c ****         return 1;
  94:Core/Src/main.c ****     }
  95:Core/Src/main.c ****     else if (strcmp(Rx_Buffer, "blink2") == 0)
  96:Core/Src/main.c ****     {
  97:Core/Src/main.c ****         return 2;
  98:Core/Src/main.c ****     }
  99:Core/Src/main.c ****     else if (strcmp(Rx_Buffer, "blink3") == 0)
 100:Core/Src/main.c ****     {
 101:Core/Src/main.c ****         return 3;
 102:Core/Src/main.c ****     }
 103:Core/Src/main.c ****     else
 104:Core/Src/main.c ****     {
 105:Core/Src/main.c ****         return 0;
 106:Core/Src/main.c ****     }
 107:Core/Src/main.c **** }
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 110:Core/Src/main.c **** {
 111:Core/Src/main.c ****     uint8_t i;
 112:Core/Src/main.c ****     HAL_StatusTypeDef ret;
 113:Core/Src/main.c ****     // if (huart->Instance == USART1) //current UART
 114:Core/Src/main.c ****     // {
 115:Core/Src/main.c ****     if (Rx_indx >= MAX_BUFFER_SIZE)
 116:Core/Src/main.c ****     {
 117:Core/Src/main.c ****         Rx_indx = 0;
 118:Core/Src/main.c ****         for (i = 0; i < MAX_BUFFER_SIZE; i++)
 119:Core/Src/main.c ****         {
 120:Core/Src/main.c ****             Rx_Buffer[i] = '\0';
 121:Core/Src/main.c ****         }
 122:Core/Src/main.c ****     } //clear Rx_Buffer before receiving new data
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****     if (Rx_data[0] != 13 && Rx_data[0] != 10) //if received data different from ascii 13 (enter)
 125:Core/Src/main.c ****     {
 126:Core/Src/main.c ****         Rx_Buffer[Rx_indx++] = Rx_data[0]; //add data to Rx_Buffer
 127:Core/Src/main.c ****     }
 128:Core/Src/main.c ****     else //if received data = 13
 129:Core/Src/main.c ****     {
 130:Core/Src/main.c ****         Rx_indx = 0;
 131:Core/Src/main.c ****         Transfer_cplt = 1; //transfer complete, data is ready to read
 132:Core/Src/main.c ****         maintask = decode_cmd();
 133:Core/Src/main.c ****     }
 134:Core/Src/main.c ****     // HAL_UART_GetState(&huart1);
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****     ret = HAL_UART_Receive_IT(&huart1, Rx_data, 1); //activate UART receive interrupt every time
 137:Core/Src/main.c ****     if (ret == HAL_OK)
 138:Core/Src/main.c ****     {
 139:Core/Src/main.c ****         HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 140:Core/Src/main.c ****     }
 141:Core/Src/main.c ****     else
 142:Core/Src/main.c ****     {
 143:Core/Src/main.c ****         errorcode = (uint8_t)ret;
 144:Core/Src/main.c ****     }
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****     // }
 147:Core/Src/main.c **** }
ARM GAS  /tmp/ccZBciSD.s 			page 4


 148:Core/Src/main.c **** 
 149:Core/Src/main.c **** /* USER CODE END 0 */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** /**
 152:Core/Src/main.c ****   * @brief  The application entry point.
 153:Core/Src/main.c ****   * @retval int
 154:Core/Src/main.c ****   */
 155:Core/Src/main.c **** int main(void)
 156:Core/Src/main.c **** {
 157:Core/Src/main.c ****     /* USER CODE BEGIN 1 */
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****     /* USER CODE END 1 */
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****     /* MCU Configuration--------------------------------------------------------*/
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 164:Core/Src/main.c ****     HAL_Init();
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****     /* USER CODE BEGIN Init */
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****     /* USER CODE END Init */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****     /* Configure the system clock */
 171:Core/Src/main.c ****     SystemClock_Config();
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****     /* USER CODE BEGIN SysInit */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****     /* USER CODE END SysInit */
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****     /* Initialize all configured peripherals */
 178:Core/Src/main.c ****     MX_GPIO_Init();
 179:Core/Src/main.c ****     MX_USART1_UART_Init();
 180:Core/Src/main.c ****     /* USER CODE BEGIN 2 */
 181:Core/Src/main.c ****     HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 182:Core/Src/main.c ****     /* USER CODE END 2 */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****     /* Infinite loop */
 185:Core/Src/main.c ****     /* USER CODE BEGIN WHILE */
 186:Core/Src/main.c ****     char tmp[10] = "hello\n";
 187:Core/Src/main.c ****     int idx = 0;
 188:Core/Src/main.c ****     uint8_t delay_param = 1000;
 189:Core/Src/main.c ****     while (1)
 190:Core/Src/main.c ****     {
 191:Core/Src/main.c ****         if (maintask == 1)
 192:Core/Src/main.c ****         {
 193:Core/Src/main.c ****             HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 194:Core/Src/main.c ****             delay_param = 200;
 195:Core/Src/main.c ****             // HAL_Delay(2000);
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****             // memset(0, Rx_Buffer, sizeof(Rx_Buffer));
 198:Core/Src/main.c ****             // printf("hello >> %u\n", idx++);
 199:Core/Src/main.c ****             // if (Transfer_cplt == 1)
 200:Core/Src/main.c ****             // {
 201:Core/Src/main.c ****             //     HAL_UART_Transmit(&huart1, (uint8_t *)&Rx_Buffer, strlen(Rx_Buffer), 100);
 202:Core/Src/main.c ****             //     printf("\n");
 203:Core/Src/main.c ****             //     Transfer_cplt = 0;
 204:Core/Src/main.c ****             // }
ARM GAS  /tmp/ccZBciSD.s 			page 5


 205:Core/Src/main.c ****         }
 206:Core/Src/main.c ****         else if (maintask == 2)
 207:Core/Src/main.c ****         {
 208:Core/Src/main.c ****             HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 209:Core/Src/main.c ****             delay_param = 200;
 210:Core/Src/main.c ****         }
 211:Core/Src/main.c ****         else if (maintask == 3)
 212:Core/Src/main.c ****         {
 213:Core/Src/main.c ****             HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 214:Core/Src/main.c ****             HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 215:Core/Src/main.c ****             delay_param = 20;
 216:Core/Src/main.c ****         }
 217:Core/Src/main.c ****         else
 218:Core/Src/main.c ****         {
 219:Core/Src/main.c ****             HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 220:Core/Src/main.c ****             HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 221:Core/Src/main.c ****             delay_param = 1000;
 222:Core/Src/main.c ****         }
 223:Core/Src/main.c **** 
 224:Core/Src/main.c ****         if (Transfer_cplt == 1)
 225:Core/Src/main.c ****         {
 226:Core/Src/main.c ****             HAL_UART_Transmit(&huart1, (uint8_t *)&Rx_Buffer, strlen(Rx_Buffer), 100);
 227:Core/Src/main.c ****             if (maintask != 0)
 228:Core/Src/main.c ****             {
 229:Core/Src/main.c ****                 printf(" >> OK\n");
 230:Core/Src/main.c ****             }
 231:Core/Src/main.c ****             else
 232:Core/Src/main.c ****             {
 233:Core/Src/main.c ****                 printf("\n");
 234:Core/Src/main.c ****             }
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****             Transfer_cplt = 0;
 237:Core/Src/main.c ****         }
 238:Core/Src/main.c ****         // printf("hello >> %u\n", idx++);
 239:Core/Src/main.c ****         HAL_Delay(delay_param);
 240:Core/Src/main.c ****         /* USER CODE END WHILE */
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****         /* USER CODE BEGIN 3 */
 243:Core/Src/main.c ****     }
 244:Core/Src/main.c ****     /* USER CODE END 3 */
 245:Core/Src/main.c **** }
 246:Core/Src/main.c **** 
 247:Core/Src/main.c **** /**
 248:Core/Src/main.c ****   * @brief System Clock Configuration
 249:Core/Src/main.c ****   * @retval None
 250:Core/Src/main.c ****   */
 251:Core/Src/main.c **** void SystemClock_Config(void)
 252:Core/Src/main.c **** {
 253:Core/Src/main.c ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 254:Core/Src/main.c ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 255:Core/Src/main.c ****     RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****     /** Initializes the RCC Oscillators according to the specified parameters
 258:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 259:Core/Src/main.c ****   */
 260:Core/Src/main.c ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 261:Core/Src/main.c ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccZBciSD.s 			page 6


 262:Core/Src/main.c ****     RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 263:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 264:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 265:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 266:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 267:Core/Src/main.c ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 268:Core/Src/main.c ****     {
 269:Core/Src/main.c ****         Error_Handler();
 270:Core/Src/main.c ****     }
 271:Core/Src/main.c ****     /** Initializes the CPU, AHB and APB buses clocks
 272:Core/Src/main.c ****   */
 273:Core/Src/main.c ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 274:Core/Src/main.c ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 275:Core/Src/main.c ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 276:Core/Src/main.c ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 279:Core/Src/main.c ****     {
 280:Core/Src/main.c ****         Error_Handler();
 281:Core/Src/main.c ****     }
 282:Core/Src/main.c ****     PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 283:Core/Src/main.c ****     PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 284:Core/Src/main.c ****     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 285:Core/Src/main.c ****     {
 286:Core/Src/main.c ****         Error_Handler();
 287:Core/Src/main.c ****     }
 288:Core/Src/main.c **** }
 289:Core/Src/main.c **** 
 290:Core/Src/main.c **** /**
 291:Core/Src/main.c ****   * @brief USART1 Initialization Function
 292:Core/Src/main.c ****   * @param None
 293:Core/Src/main.c ****   * @retval None
 294:Core/Src/main.c ****   */
 295:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 296:Core/Src/main.c **** {
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****     /* USER CODE BEGIN USART1_Init 0 */
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****     /* USER CODE END USART1_Init 0 */
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****     /* USER CODE BEGIN USART1_Init 1 */
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****     /* USER CODE END USART1_Init 1 */
 305:Core/Src/main.c ****     huart1.Instance = USART1;
 306:Core/Src/main.c ****     huart1.Init.BaudRate = 9600;
 307:Core/Src/main.c ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 308:Core/Src/main.c ****     huart1.Init.StopBits = UART_STOPBITS_1;
 309:Core/Src/main.c ****     huart1.Init.Parity = UART_PARITY_NONE;
 310:Core/Src/main.c ****     huart1.Init.Mode = UART_MODE_TX_RX;
 311:Core/Src/main.c ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 312:Core/Src/main.c ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 313:Core/Src/main.c ****     huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 314:Core/Src/main.c ****     huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 315:Core/Src/main.c ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 316:Core/Src/main.c ****     {
 317:Core/Src/main.c ****         Error_Handler();
 318:Core/Src/main.c ****     }
ARM GAS  /tmp/ccZBciSD.s 			page 7


 319:Core/Src/main.c ****     /* USER CODE BEGIN USART1_Init 2 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****     /* USER CODE END USART1_Init 2 */
 322:Core/Src/main.c **** }
 323:Core/Src/main.c **** 
 324:Core/Src/main.c **** /**
 325:Core/Src/main.c ****   * @brief GPIO Initialization Function
 326:Core/Src/main.c ****   * @param None
 327:Core/Src/main.c ****   * @retval None
 328:Core/Src/main.c ****   */
 329:Core/Src/main.c **** static void MX_GPIO_Init(void)
 330:Core/Src/main.c **** {
  26              		.loc 1 330 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 331:Core/Src/main.c ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 331 5 view .LVU1
  42              		.loc 1 331 22 is_stmt 0 view .LVU2
  43 0004 1422     		movs	r2, #20
  44 0006 0021     		movs	r1, #0
  45 0008 03A8     		add	r0, sp, #12
  46 000a FFF7FEFF 		bl	memset
  47              	.LVL0:
 332:Core/Src/main.c **** 
 333:Core/Src/main.c ****     /* GPIO Ports Clock Enable */
 334:Core/Src/main.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 334 5 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 334 5 view .LVU4
  51              		.loc 1 334 5 view .LVU5
  52 000e 184B     		ldr	r3, .L2
  53 0010 5969     		ldr	r1, [r3, #20]
  54 0012 8020     		movs	r0, #128
  55 0014 8002     		lsls	r0, r0, #10
  56 0016 0143     		orrs	r1, r0
  57 0018 5961     		str	r1, [r3, #20]
  58              		.loc 1 334 5 view .LVU6
  59 001a 5A69     		ldr	r2, [r3, #20]
  60 001c 0240     		ands	r2, r0
  61 001e 0192     		str	r2, [sp, #4]
  62              		.loc 1 334 5 view .LVU7
  63 0020 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 334 5 view .LVU8
 335:Core/Src/main.c ****     __HAL_RCC_GPIOC_CLK_ENABLE();
ARM GAS  /tmp/ccZBciSD.s 			page 8


  66              		.loc 1 335 5 view .LVU9
  67              	.LBB5:
  68              		.loc 1 335 5 view .LVU10
  69              		.loc 1 335 5 view .LVU11
  70 0022 5A69     		ldr	r2, [r3, #20]
  71 0024 8021     		movs	r1, #128
  72 0026 0903     		lsls	r1, r1, #12
  73 0028 0A43     		orrs	r2, r1
  74 002a 5A61     		str	r2, [r3, #20]
  75              		.loc 1 335 5 view .LVU12
  76 002c 5B69     		ldr	r3, [r3, #20]
  77 002e 0B40     		ands	r3, r1
  78 0030 0293     		str	r3, [sp, #8]
  79              		.loc 1 335 5 view .LVU13
  80 0032 029B     		ldr	r3, [sp, #8]
  81              	.LBE5:
  82              		.loc 1 335 5 view .LVU14
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****     /*Configure GPIO pin Output Level */
 338:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, LD4_Pin | LD3_Pin, GPIO_PIN_RESET);
  83              		.loc 1 338 5 view .LVU15
  84 0034 C027     		movs	r7, #192
  85 0036 BF00     		lsls	r7, r7, #2
  86 0038 0E4D     		ldr	r5, .L2+4
  87 003a 0022     		movs	r2, #0
  88 003c 3900     		movs	r1, r7
  89 003e 2800     		movs	r0, r5
  90 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
  91              	.LVL1:
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****     /*Configure GPIO pin : B1_Pin */
 341:Core/Src/main.c ****     GPIO_InitStruct.Pin = B1_Pin;
  92              		.loc 1 341 5 view .LVU16
  93              		.loc 1 341 25 is_stmt 0 view .LVU17
  94 0044 0126     		movs	r6, #1
  95 0046 0396     		str	r6, [sp, #12]
 342:Core/Src/main.c ****     GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  96              		.loc 1 342 5 is_stmt 1 view .LVU18
  97              		.loc 1 342 26 is_stmt 0 view .LVU19
  98 0048 9023     		movs	r3, #144
  99 004a 5B03     		lsls	r3, r3, #13
 100 004c 0493     		str	r3, [sp, #16]
 343:Core/Src/main.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 101              		.loc 1 343 5 is_stmt 1 view .LVU20
 102              		.loc 1 343 26 is_stmt 0 view .LVU21
 103 004e 0024     		movs	r4, #0
 104 0050 0594     		str	r4, [sp, #20]
 344:Core/Src/main.c ****     HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 105              		.loc 1 344 5 is_stmt 1 view .LVU22
 106 0052 9020     		movs	r0, #144
 107 0054 03A9     		add	r1, sp, #12
 108 0056 C005     		lsls	r0, r0, #23
 109 0058 FFF7FEFF 		bl	HAL_GPIO_Init
 110              	.LVL2:
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****     /*Configure GPIO pins : LD4_Pin LD3_Pin */
 347:Core/Src/main.c ****     GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin;
ARM GAS  /tmp/ccZBciSD.s 			page 9


 111              		.loc 1 347 5 view .LVU23
 112              		.loc 1 347 25 is_stmt 0 view .LVU24
 113 005c 0397     		str	r7, [sp, #12]
 348:Core/Src/main.c ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 114              		.loc 1 348 5 is_stmt 1 view .LVU25
 115              		.loc 1 348 26 is_stmt 0 view .LVU26
 116 005e 0496     		str	r6, [sp, #16]
 349:Core/Src/main.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 117              		.loc 1 349 5 is_stmt 1 view .LVU27
 118              		.loc 1 349 26 is_stmt 0 view .LVU28
 119 0060 0594     		str	r4, [sp, #20]
 350:Core/Src/main.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 120              		.loc 1 350 5 is_stmt 1 view .LVU29
 121              		.loc 1 350 27 is_stmt 0 view .LVU30
 122 0062 0694     		str	r4, [sp, #24]
 351:Core/Src/main.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 123              		.loc 1 351 5 is_stmt 1 view .LVU31
 124 0064 03A9     		add	r1, sp, #12
 125 0066 2800     		movs	r0, r5
 126 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 127              	.LVL3:
 352:Core/Src/main.c **** }
 128              		.loc 1 352 1 is_stmt 0 view .LVU32
 129 006c 09B0     		add	sp, sp, #36
 130              		@ sp needed
 131 006e F0BD     		pop	{r4, r5, r6, r7, pc}
 132              	.L3:
 133              		.align	2
 134              	.L2:
 135 0070 00100240 		.word	1073876992
 136 0074 00080048 		.word	1207961600
 137              		.cfi_endproc
 138              	.LFE46:
 140              		.section	.text._write,"ax",%progbits
 141              		.align	1
 142              		.global	_write
 143              		.syntax unified
 144              		.code	16
 145              		.thumb_func
 146              		.fpu softvfp
 148              	_write:
 149              	.LVL4:
 150              	.LFB40:
  62:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 151              		.loc 1 62 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
  62:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 155              		.loc 1 62 1 is_stmt 0 view .LVU34
 156 0000 10B5     		push	{r4, lr}
 157              	.LCFI2:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 4, -8
 160              		.cfi_offset 14, -4
 161 0002 1400     		movs	r4, r2
  63:Core/Src/main.c ****     return len;
ARM GAS  /tmp/ccZBciSD.s 			page 10


 162              		.loc 1 63 5 is_stmt 1 view .LVU35
 163 0004 0123     		movs	r3, #1
 164 0006 92B2     		uxth	r2, r2
 165              	.LVL5:
  63:Core/Src/main.c ****     return len;
 166              		.loc 1 63 5 is_stmt 0 view .LVU36
 167 0008 5B42     		rsbs	r3, r3, #0
 168 000a 0248     		ldr	r0, .L5
 169              	.LVL6:
  63:Core/Src/main.c ****     return len;
 170              		.loc 1 63 5 view .LVU37
 171 000c FFF7FEFF 		bl	HAL_UART_Transmit
 172              	.LVL7:
  64:Core/Src/main.c **** }
 173              		.loc 1 64 5 is_stmt 1 view .LVU38
  65:Core/Src/main.c **** #elif defined(__ICCARM__)
 174              		.loc 1 65 1 is_stmt 0 view .LVU39
 175 0010 2000     		movs	r0, r4
 176              		@ sp needed
 177              	.LVL8:
  65:Core/Src/main.c **** #elif defined(__ICCARM__)
 178              		.loc 1 65 1 view .LVU40
 179 0012 10BD     		pop	{r4, pc}
 180              	.L6:
 181              		.align	2
 182              	.L5:
 183 0014 00000000 		.word	huart1
 184              		.cfi_endproc
 185              	.LFE40:
 187              		.section	.rodata.decode_cmd.str1.4,"aMS",%progbits,1
 188              		.align	2
 189              	.LC1:
 190 0000 626C696E 		.ascii	"blink1\000"
 190      6B3100
 191 0007 00       		.align	2
 192              	.LC4:
 193 0008 626C696E 		.ascii	"blink2\000"
 193      6B3200
 194 000f 00       		.align	2
 195              	.LC6:
 196 0010 626C696E 		.ascii	"blink3\000"
 196      6B3300
 197              		.section	.text.decode_cmd,"ax",%progbits
 198              		.align	1
 199              		.global	decode_cmd
 200              		.syntax unified
 201              		.code	16
 202              		.thumb_func
 203              		.fpu softvfp
 205              	decode_cmd:
 206              	.LFB41:
  88:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 207              		.loc 1 88 1 is_stmt 1 view -0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccZBciSD.s 			page 11


 212              	.LCFI3:
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 4, -8
 215              		.cfi_offset 14, -4
  89:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 216              		.loc 1 89 5 view .LVU42
 217 0002 8021     		movs	r1, #128
 218 0004 124C     		ldr	r4, .L13
 219 0006 0022     		movs	r2, #0
 220 0008 4900     		lsls	r1, r1, #1
 221 000a 2000     		movs	r0, r4
 222 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 223              	.LVL9:
  90:Core/Src/main.c ****     if (strcmp(Rx_Buffer, "blink1") == 0)
 224              		.loc 1 90 5 view .LVU43
 225 0010 8021     		movs	r1, #128
 226 0012 0022     		movs	r2, #0
 227 0014 8900     		lsls	r1, r1, #2
 228 0016 2000     		movs	r0, r4
 229 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
 230              	.LVL10:
  91:Core/Src/main.c ****     {
 231              		.loc 1 91 5 view .LVU44
 232              	.LBB6:
  91:Core/Src/main.c ****     {
 233              		.loc 1 91 9 is_stmt 0 view .LVU45
 234 001c 0D49     		ldr	r1, .L13+4
 235 001e 0E48     		ldr	r0, .L13+8
 236 0020 FFF7FEFF 		bl	strcmp
 237              	.LVL11:
  91:Core/Src/main.c ****     {
 238              		.loc 1 91 8 view .LVU46
 239 0024 0028     		cmp	r0, #0
 240 0026 0FD0     		beq	.L9
  95:Core/Src/main.c ****     {
 241              		.loc 1 95 10 is_stmt 1 view .LVU47
  95:Core/Src/main.c ****     {
 242              		.loc 1 95 14 is_stmt 0 view .LVU48
 243 0028 0C49     		ldr	r1, .L13+12
 244 002a 0B48     		ldr	r0, .L13+8
 245 002c FFF7FEFF 		bl	strcmp
 246              	.LVL12:
  95:Core/Src/main.c ****     {
 247              		.loc 1 95 13 view .LVU49
 248 0030 0028     		cmp	r0, #0
 249 0032 0BD0     		beq	.L10
  99:Core/Src/main.c ****     {
 250              		.loc 1 99 10 is_stmt 1 view .LVU50
  99:Core/Src/main.c ****     {
 251              		.loc 1 99 14 is_stmt 0 view .LVU51
 252 0034 0A49     		ldr	r1, .L13+16
 253 0036 0848     		ldr	r0, .L13+8
 254 0038 FFF7FEFF 		bl	strcmp
 255              	.LVL13:
  99:Core/Src/main.c ****     {
 256              		.loc 1 99 13 view .LVU52
 257 003c 0028     		cmp	r0, #0
ARM GAS  /tmp/ccZBciSD.s 			page 12


 258 003e 01D0     		beq	.L12
 105:Core/Src/main.c ****     }
 259              		.loc 1 105 16 view .LVU53
 260 0040 0020     		movs	r0, #0
 261 0042 02E0     		b	.L8
 262              	.L12:
 101:Core/Src/main.c ****     }
 263              		.loc 1 101 16 view .LVU54
 264 0044 0330     		adds	r0, r0, #3
 265 0046 00E0     		b	.L8
 266              	.L9:
  93:Core/Src/main.c ****     }
 267              		.loc 1 93 16 view .LVU55
 268 0048 0120     		movs	r0, #1
 269              	.L8:
 270              	.LBE6:
 107:Core/Src/main.c **** 
 271              		.loc 1 107 1 view .LVU56
 272              		@ sp needed
 273 004a 10BD     		pop	{r4, pc}
 274              	.L10:
 275              	.LBB7:
  97:Core/Src/main.c ****     }
 276              		.loc 1 97 16 view .LVU57
 277 004c 0220     		movs	r0, #2
 278 004e FCE7     		b	.L8
 279              	.L14:
 280              		.align	2
 281              	.L13:
 282 0050 00080048 		.word	1207961600
 283 0054 00000000 		.word	.LC1
 284 0058 00000000 		.word	.LANCHOR0
 285 005c 08000000 		.word	.LC4
 286 0060 10000000 		.word	.LC6
 287              	.LBE7:
 288              		.cfi_endproc
 289              	.LFE41:
 291              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 292              		.align	1
 293              		.global	HAL_UART_RxCpltCallback
 294              		.syntax unified
 295              		.code	16
 296              		.thumb_func
 297              		.fpu softvfp
 299              	HAL_UART_RxCpltCallback:
 300              	.LVL14:
 301              	.LFB42:
 110:Core/Src/main.c ****     uint8_t i;
 302              		.loc 1 110 1 is_stmt 1 view -0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 110:Core/Src/main.c ****     uint8_t i;
 306              		.loc 1 110 1 is_stmt 0 view .LVU59
 307 0000 10B5     		push	{r4, lr}
 308              	.LCFI4:
 309              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccZBciSD.s 			page 13


 310              		.cfi_offset 4, -8
 311              		.cfi_offset 14, -4
 111:Core/Src/main.c ****     HAL_StatusTypeDef ret;
 312              		.loc 1 111 5 is_stmt 1 view .LVU60
 112:Core/Src/main.c ****     // if (huart->Instance == USART1) //current UART
 313              		.loc 1 112 5 view .LVU61
 115:Core/Src/main.c ****     {
 314              		.loc 1 115 5 view .LVU62
 115:Core/Src/main.c ****     {
 315              		.loc 1 115 17 is_stmt 0 view .LVU63
 316 0002 1B4B     		ldr	r3, .L24
 317 0004 1B78     		ldrb	r3, [r3]
 115:Core/Src/main.c ****     {
 318              		.loc 1 115 8 view .LVU64
 319 0006 632B     		cmp	r3, #99
 320 0008 0BD9     		bls	.L16
 117:Core/Src/main.c ****         for (i = 0; i < MAX_BUFFER_SIZE; i++)
 321              		.loc 1 117 9 is_stmt 1 view .LVU65
 117:Core/Src/main.c ****         for (i = 0; i < MAX_BUFFER_SIZE; i++)
 322              		.loc 1 117 17 is_stmt 0 view .LVU66
 323 000a 194B     		ldr	r3, .L24
 324 000c 0022     		movs	r2, #0
 325 000e 1A70     		strb	r2, [r3]
 118:Core/Src/main.c ****         {
 326              		.loc 1 118 9 is_stmt 1 view .LVU67
 327              	.LVL15:
 118:Core/Src/main.c ****         {
 328              		.loc 1 118 16 is_stmt 0 view .LVU68
 329 0010 0023     		movs	r3, #0
 118:Core/Src/main.c ****         {
 330              		.loc 1 118 9 view .LVU69
 331 0012 04E0     		b	.L17
 332              	.LVL16:
 333              	.L18:
 120:Core/Src/main.c ****         }
 334              		.loc 1 120 13 is_stmt 1 discriminator 3 view .LVU70
 120:Core/Src/main.c ****         }
 335              		.loc 1 120 26 is_stmt 0 discriminator 3 view .LVU71
 336 0014 174A     		ldr	r2, .L24+4
 337 0016 0021     		movs	r1, #0
 338 0018 D154     		strb	r1, [r2, r3]
 118:Core/Src/main.c ****         {
 339              		.loc 1 118 42 is_stmt 1 discriminator 3 view .LVU72
 118:Core/Src/main.c ****         {
 340              		.loc 1 118 43 is_stmt 0 discriminator 3 view .LVU73
 341 001a 0133     		adds	r3, r3, #1
 342              	.LVL17:
 118:Core/Src/main.c ****         {
 343              		.loc 1 118 43 discriminator 3 view .LVU74
 344 001c DBB2     		uxtb	r3, r3
 345              	.LVL18:
 346              	.L17:
 118:Core/Src/main.c ****         {
 347              		.loc 1 118 21 is_stmt 1 discriminator 1 view .LVU75
 118:Core/Src/main.c ****         {
 348              		.loc 1 118 9 is_stmt 0 discriminator 1 view .LVU76
 349 001e 632B     		cmp	r3, #99
ARM GAS  /tmp/ccZBciSD.s 			page 14


 350 0020 F8D9     		bls	.L18
 351              	.LVL19:
 352              	.L16:
 124:Core/Src/main.c ****     {
 353              		.loc 1 124 5 is_stmt 1 view .LVU77
 124:Core/Src/main.c ****     {
 354              		.loc 1 124 16 is_stmt 0 view .LVU78
 355 0022 154B     		ldr	r3, .L24+8
 356 0024 1B78     		ldrb	r3, [r3]
 124:Core/Src/main.c ****     {
 357              		.loc 1 124 8 view .LVU79
 358 0026 0D2B     		cmp	r3, #13
 359 0028 11D0     		beq	.L19
 124:Core/Src/main.c ****     {
 360              		.loc 1 124 26 discriminator 1 view .LVU80
 361 002a 0A2B     		cmp	r3, #10
 362 002c 0FD0     		beq	.L19
 126:Core/Src/main.c ****     }
 363              		.loc 1 126 9 is_stmt 1 view .LVU81
 126:Core/Src/main.c ****     }
 364              		.loc 1 126 26 is_stmt 0 view .LVU82
 365 002e 1049     		ldr	r1, .L24
 366 0030 0A78     		ldrb	r2, [r1]
 367 0032 501C     		adds	r0, r2, #1
 368              	.LVL20:
 126:Core/Src/main.c ****     }
 369              		.loc 1 126 26 view .LVU83
 370 0034 0870     		strb	r0, [r1]
 126:Core/Src/main.c ****     }
 371              		.loc 1 126 30 view .LVU84
 372 0036 0F49     		ldr	r1, .L24+4
 373 0038 8B54     		strb	r3, [r1, r2]
 374              	.L20:
 136:Core/Src/main.c ****     if (ret == HAL_OK)
 375              		.loc 1 136 5 is_stmt 1 view .LVU85
 136:Core/Src/main.c ****     if (ret == HAL_OK)
 376              		.loc 1 136 11 is_stmt 0 view .LVU86
 377 003a 0122     		movs	r2, #1
 378 003c 0E49     		ldr	r1, .L24+8
 379 003e 0F48     		ldr	r0, .L24+12
 380 0040 FFF7FEFF 		bl	HAL_UART_Receive_IT
 381              	.LVL21:
 137:Core/Src/main.c ****     {
 382              		.loc 1 137 5 is_stmt 1 view .LVU87
 137:Core/Src/main.c ****     {
 383              		.loc 1 137 8 is_stmt 0 view .LVU88
 384 0044 0028     		cmp	r0, #0
 385 0046 0DD0     		beq	.L23
 143:Core/Src/main.c ****     }
 386              		.loc 1 143 9 is_stmt 1 view .LVU89
 143:Core/Src/main.c ****     }
 387              		.loc 1 143 19 is_stmt 0 view .LVU90
 388 0048 0D4B     		ldr	r3, .L24+16
 389 004a 1870     		strb	r0, [r3]
 390              	.LVL22:
 391              	.L15:
 147:Core/Src/main.c **** 
ARM GAS  /tmp/ccZBciSD.s 			page 15


 392              		.loc 1 147 1 view .LVU91
 393              		@ sp needed
 394 004c 10BD     		pop	{r4, pc}
 395              	.LVL23:
 396              	.L19:
 130:Core/Src/main.c ****         Transfer_cplt = 1; //transfer complete, data is ready to read
 397              		.loc 1 130 9 is_stmt 1 view .LVU92
 130:Core/Src/main.c ****         Transfer_cplt = 1; //transfer complete, data is ready to read
 398              		.loc 1 130 17 is_stmt 0 view .LVU93
 399 004e 084B     		ldr	r3, .L24
 400 0050 0022     		movs	r2, #0
 401 0052 1A70     		strb	r2, [r3]
 131:Core/Src/main.c ****         maintask = decode_cmd();
 402              		.loc 1 131 9 is_stmt 1 view .LVU94
 131:Core/Src/main.c ****         maintask = decode_cmd();
 403              		.loc 1 131 23 is_stmt 0 view .LVU95
 404 0054 0B4B     		ldr	r3, .L24+20
 405 0056 0132     		adds	r2, r2, #1
 406 0058 1A70     		strb	r2, [r3]
 132:Core/Src/main.c ****     }
 407              		.loc 1 132 9 is_stmt 1 view .LVU96
 132:Core/Src/main.c ****     }
 408              		.loc 1 132 20 is_stmt 0 view .LVU97
 409 005a FFF7FEFF 		bl	decode_cmd
 410              	.LVL24:
 132:Core/Src/main.c ****     }
 411              		.loc 1 132 18 view .LVU98
 412 005e 0A4B     		ldr	r3, .L24+24
 413 0060 1870     		strb	r0, [r3]
 414 0062 EAE7     		b	.L20
 415              	.LVL25:
 416              	.L23:
 139:Core/Src/main.c ****     }
 417              		.loc 1 139 9 is_stmt 1 view .LVU99
 418 0064 8021     		movs	r1, #128
 419 0066 4900     		lsls	r1, r1, #1
 420 0068 0848     		ldr	r0, .L24+28
 421              	.LVL26:
 139:Core/Src/main.c ****     }
 422              		.loc 1 139 9 is_stmt 0 view .LVU100
 423 006a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 424              	.LVL27:
 425 006e EDE7     		b	.L15
 426              	.L25:
 427              		.align	2
 428              	.L24:
 429 0070 00000000 		.word	.LANCHOR1
 430 0074 00000000 		.word	.LANCHOR0
 431 0078 00000000 		.word	.LANCHOR2
 432 007c 00000000 		.word	huart1
 433 0080 00000000 		.word	.LANCHOR5
 434 0084 00000000 		.word	.LANCHOR3
 435 0088 00000000 		.word	.LANCHOR4
 436 008c 00080048 		.word	1207961600
 437              		.cfi_endproc
 438              	.LFE42:
 440              		.section	.text.Error_Handler,"ax",%progbits
ARM GAS  /tmp/ccZBciSD.s 			page 16


 441              		.align	1
 442              		.global	Error_Handler
 443              		.syntax unified
 444              		.code	16
 445              		.thumb_func
 446              		.fpu softvfp
 448              	Error_Handler:
 449              	.LFB47:
 353:Core/Src/main.c **** 
 354:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 355:Core/Src/main.c **** 
 356:Core/Src/main.c **** /* USER CODE END 4 */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c **** /**
 359:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 360:Core/Src/main.c ****   * @retval None
 361:Core/Src/main.c ****   */
 362:Core/Src/main.c **** void Error_Handler(void)
 363:Core/Src/main.c **** {
 450              		.loc 1 363 1 is_stmt 1 view -0
 451              		.cfi_startproc
 452              		@ Volatile: function does not return.
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455              		@ link register save eliminated.
 364:Core/Src/main.c ****     /* USER CODE BEGIN Error_Handler_Debug */
 365:Core/Src/main.c ****     /* User can add his own implementation to report the HAL error return state */
 366:Core/Src/main.c ****     __disable_irq();
 456              		.loc 1 366 5 view .LVU102
 457              	.LBB8:
 458              	.LBI8:
 459              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
ARM GAS  /tmp/ccZBciSD.s 			page 17


  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
ARM GAS  /tmp/ccZBciSD.s 			page 18


  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccZBciSD.s 			page 19


 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 460              		.loc 2 140 27 view .LVU103
 461              	.LBB9:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 462              		.loc 2 142 3 view .LVU104
 463              		.syntax divided
 464              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 465 0000 72B6     		cpsid i
 466              	@ 0 "" 2
 467              		.thumb
 468              		.syntax unified
 469              	.L27:
 470              	.LBE9:
 471              	.LBE8:
 367:Core/Src/main.c ****     while (1)
 472              		.loc 1 367 5 discriminator 1 view .LVU105
 368:Core/Src/main.c ****     {
 369:Core/Src/main.c ****     }
 473              		.loc 1 369 5 discriminator 1 view .LVU106
 367:Core/Src/main.c ****     while (1)
 474              		.loc 1 367 11 discriminator 1 view .LVU107
 475 0002 FEE7     		b	.L27
 476              		.cfi_endproc
 477              	.LFE47:
 479              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 480              		.align	1
 481              		.syntax unified
 482              		.code	16
 483              		.thumb_func
 484              		.fpu softvfp
 486              	MX_USART1_UART_Init:
 487              	.LFB45:
 296:Core/Src/main.c **** 
 488              		.loc 1 296 1 view -0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 492 0000 10B5     		push	{r4, lr}
 493              	.LCFI5:
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 4, -8
 496              		.cfi_offset 14, -4
 305:Core/Src/main.c ****     huart1.Init.BaudRate = 9600;
 497              		.loc 1 305 5 view .LVU109
 305:Core/Src/main.c ****     huart1.Init.BaudRate = 9600;
 498              		.loc 1 305 21 is_stmt 0 view .LVU110
 499 0002 0B48     		ldr	r0, .L31
 500 0004 0B4B     		ldr	r3, .L31+4
 501 0006 0360     		str	r3, [r0]
 306:Core/Src/main.c ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 502              		.loc 1 306 5 is_stmt 1 view .LVU111
 306:Core/Src/main.c ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 503              		.loc 1 306 26 is_stmt 0 view .LVU112
 504 0008 9623     		movs	r3, #150
 505 000a 9B01     		lsls	r3, r3, #6
 506 000c 4360     		str	r3, [r0, #4]
ARM GAS  /tmp/ccZBciSD.s 			page 20


 307:Core/Src/main.c ****     huart1.Init.StopBits = UART_STOPBITS_1;
 507              		.loc 1 307 5 is_stmt 1 view .LVU113
 307:Core/Src/main.c ****     huart1.Init.StopBits = UART_STOPBITS_1;
 508              		.loc 1 307 28 is_stmt 0 view .LVU114
 509 000e 0023     		movs	r3, #0
 510 0010 8360     		str	r3, [r0, #8]
 308:Core/Src/main.c ****     huart1.Init.Parity = UART_PARITY_NONE;
 511              		.loc 1 308 5 is_stmt 1 view .LVU115
 308:Core/Src/main.c ****     huart1.Init.Parity = UART_PARITY_NONE;
 512              		.loc 1 308 26 is_stmt 0 view .LVU116
 513 0012 C360     		str	r3, [r0, #12]
 309:Core/Src/main.c ****     huart1.Init.Mode = UART_MODE_TX_RX;
 514              		.loc 1 309 5 is_stmt 1 view .LVU117
 309:Core/Src/main.c ****     huart1.Init.Mode = UART_MODE_TX_RX;
 515              		.loc 1 309 24 is_stmt 0 view .LVU118
 516 0014 0361     		str	r3, [r0, #16]
 310:Core/Src/main.c ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 517              		.loc 1 310 5 is_stmt 1 view .LVU119
 310:Core/Src/main.c ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 518              		.loc 1 310 22 is_stmt 0 view .LVU120
 519 0016 0C22     		movs	r2, #12
 520 0018 4261     		str	r2, [r0, #20]
 311:Core/Src/main.c ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 521              		.loc 1 311 5 is_stmt 1 view .LVU121
 311:Core/Src/main.c ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 522              		.loc 1 311 27 is_stmt 0 view .LVU122
 523 001a 8361     		str	r3, [r0, #24]
 312:Core/Src/main.c ****     huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 524              		.loc 1 312 5 is_stmt 1 view .LVU123
 312:Core/Src/main.c ****     huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 525              		.loc 1 312 30 is_stmt 0 view .LVU124
 526 001c C361     		str	r3, [r0, #28]
 313:Core/Src/main.c ****     huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 527              		.loc 1 313 5 is_stmt 1 view .LVU125
 313:Core/Src/main.c ****     huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 528              		.loc 1 313 32 is_stmt 0 view .LVU126
 529 001e 0362     		str	r3, [r0, #32]
 314:Core/Src/main.c ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 530              		.loc 1 314 5 is_stmt 1 view .LVU127
 314:Core/Src/main.c ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 531              		.loc 1 314 40 is_stmt 0 view .LVU128
 532 0020 4362     		str	r3, [r0, #36]
 315:Core/Src/main.c ****     {
 533              		.loc 1 315 5 is_stmt 1 view .LVU129
 315:Core/Src/main.c ****     {
 534              		.loc 1 315 9 is_stmt 0 view .LVU130
 535 0022 FFF7FEFF 		bl	HAL_UART_Init
 536              	.LVL28:
 315:Core/Src/main.c ****     {
 537              		.loc 1 315 8 view .LVU131
 538 0026 0028     		cmp	r0, #0
 539 0028 00D1     		bne	.L30
 322:Core/Src/main.c **** 
 540              		.loc 1 322 1 view .LVU132
 541              		@ sp needed
 542 002a 10BD     		pop	{r4, pc}
 543              	.L30:
ARM GAS  /tmp/ccZBciSD.s 			page 21


 317:Core/Src/main.c ****     }
 544              		.loc 1 317 9 is_stmt 1 view .LVU133
 545 002c FFF7FEFF 		bl	Error_Handler
 546              	.LVL29:
 547              	.L32:
 548              		.align	2
 549              	.L31:
 550 0030 00000000 		.word	huart1
 551 0034 00380140 		.word	1073821696
 552              		.cfi_endproc
 553              	.LFE45:
 555              		.section	.text.SystemClock_Config,"ax",%progbits
 556              		.align	1
 557              		.global	SystemClock_Config
 558              		.syntax unified
 559              		.code	16
 560              		.thumb_func
 561              		.fpu softvfp
 563              	SystemClock_Config:
 564              	.LFB44:
 252:Core/Src/main.c ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 565              		.loc 1 252 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 88
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569 0000 00B5     		push	{lr}
 570              	.LCFI6:
 571              		.cfi_def_cfa_offset 4
 572              		.cfi_offset 14, -4
 573 0002 97B0     		sub	sp, sp, #92
 574              	.LCFI7:
 575              		.cfi_def_cfa_offset 96
 253:Core/Src/main.c ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 576              		.loc 1 253 5 view .LVU135
 253:Core/Src/main.c ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 577              		.loc 1 253 24 is_stmt 0 view .LVU136
 578 0004 3022     		movs	r2, #48
 579 0006 0021     		movs	r1, #0
 580 0008 0AA8     		add	r0, sp, #40
 581 000a FFF7FEFF 		bl	memset
 582              	.LVL30:
 254:Core/Src/main.c ****     RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 583              		.loc 1 254 5 is_stmt 1 view .LVU137
 254:Core/Src/main.c ****     RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 584              		.loc 1 254 24 is_stmt 0 view .LVU138
 585 000e 1022     		movs	r2, #16
 586 0010 0021     		movs	r1, #0
 587 0012 06A8     		add	r0, sp, #24
 588 0014 FFF7FEFF 		bl	memset
 589              	.LVL31:
 255:Core/Src/main.c **** 
 590              		.loc 1 255 5 is_stmt 1 view .LVU139
 255:Core/Src/main.c **** 
 591              		.loc 1 255 30 is_stmt 0 view .LVU140
 592 0018 1422     		movs	r2, #20
 593 001a 0021     		movs	r1, #0
 594 001c 01A8     		add	r0, sp, #4
ARM GAS  /tmp/ccZBciSD.s 			page 22


 595 001e FFF7FEFF 		bl	memset
 596              	.LVL32:
 260:Core/Src/main.c ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 597              		.loc 1 260 5 is_stmt 1 view .LVU141
 260:Core/Src/main.c ****     RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 598              		.loc 1 260 38 is_stmt 0 view .LVU142
 599 0022 0223     		movs	r3, #2
 600 0024 0A93     		str	r3, [sp, #40]
 261:Core/Src/main.c ****     RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 601              		.loc 1 261 5 is_stmt 1 view .LVU143
 261:Core/Src/main.c ****     RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 602              		.loc 1 261 32 is_stmt 0 view .LVU144
 603 0026 0122     		movs	r2, #1
 604 0028 0D92     		str	r2, [sp, #52]
 262:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 605              		.loc 1 262 5 is_stmt 1 view .LVU145
 262:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 606              		.loc 1 262 43 is_stmt 0 view .LVU146
 607 002a 0F32     		adds	r2, r2, #15
 608 002c 0E92     		str	r2, [sp, #56]
 263:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 609              		.loc 1 263 5 is_stmt 1 view .LVU147
 263:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 610              		.loc 1 263 36 is_stmt 0 view .LVU148
 611 002e 1293     		str	r3, [sp, #72]
 264:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 612              		.loc 1 264 5 is_stmt 1 view .LVU149
 265:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 613              		.loc 1 265 5 view .LVU150
 265:Core/Src/main.c ****     RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 614              		.loc 1 265 34 is_stmt 0 view .LVU151
 615 0030 A023     		movs	r3, #160
 616 0032 9B03     		lsls	r3, r3, #14
 617 0034 1493     		str	r3, [sp, #80]
 266:Core/Src/main.c ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 618              		.loc 1 266 5 is_stmt 1 view .LVU152
 267:Core/Src/main.c ****     {
 619              		.loc 1 267 5 view .LVU153
 267:Core/Src/main.c ****     {
 620              		.loc 1 267 9 is_stmt 0 view .LVU154
 621 0036 0AA8     		add	r0, sp, #40
 622 0038 FFF7FEFF 		bl	HAL_RCC_OscConfig
 623              	.LVL33:
 267:Core/Src/main.c ****     {
 624              		.loc 1 267 8 view .LVU155
 625 003c 0028     		cmp	r0, #0
 626 003e 17D1     		bne	.L37
 273:Core/Src/main.c ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 627              		.loc 1 273 5 is_stmt 1 view .LVU156
 273:Core/Src/main.c ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 628              		.loc 1 273 33 is_stmt 0 view .LVU157
 629 0040 0723     		movs	r3, #7
 630 0042 0693     		str	r3, [sp, #24]
 274:Core/Src/main.c ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 631              		.loc 1 274 5 is_stmt 1 view .LVU158
 274:Core/Src/main.c ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 632              		.loc 1 274 36 is_stmt 0 view .LVU159
ARM GAS  /tmp/ccZBciSD.s 			page 23


 633 0044 053B     		subs	r3, r3, #5
 634 0046 0793     		str	r3, [sp, #28]
 275:Core/Src/main.c ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 635              		.loc 1 275 5 is_stmt 1 view .LVU160
 275:Core/Src/main.c ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 636              		.loc 1 275 37 is_stmt 0 view .LVU161
 637 0048 0023     		movs	r3, #0
 638 004a 0893     		str	r3, [sp, #32]
 276:Core/Src/main.c **** 
 639              		.loc 1 276 5 is_stmt 1 view .LVU162
 276:Core/Src/main.c **** 
 640              		.loc 1 276 38 is_stmt 0 view .LVU163
 641 004c 0993     		str	r3, [sp, #36]
 278:Core/Src/main.c ****     {
 642              		.loc 1 278 5 is_stmt 1 view .LVU164
 278:Core/Src/main.c ****     {
 643              		.loc 1 278 9 is_stmt 0 view .LVU165
 644 004e 0121     		movs	r1, #1
 645 0050 06A8     		add	r0, sp, #24
 646 0052 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 647              	.LVL34:
 278:Core/Src/main.c ****     {
 648              		.loc 1 278 8 view .LVU166
 649 0056 0028     		cmp	r0, #0
 650 0058 0CD1     		bne	.L38
 282:Core/Src/main.c ****     PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 651              		.loc 1 282 5 is_stmt 1 view .LVU167
 282:Core/Src/main.c ****     PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 652              		.loc 1 282 40 is_stmt 0 view .LVU168
 653 005a 0123     		movs	r3, #1
 654 005c 0193     		str	r3, [sp, #4]
 283:Core/Src/main.c ****     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 655              		.loc 1 283 5 is_stmt 1 view .LVU169
 283:Core/Src/main.c ****     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 656              		.loc 1 283 40 is_stmt 0 view .LVU170
 657 005e 0023     		movs	r3, #0
 658 0060 0393     		str	r3, [sp, #12]
 284:Core/Src/main.c ****     {
 659              		.loc 1 284 5 is_stmt 1 view .LVU171
 284:Core/Src/main.c ****     {
 660              		.loc 1 284 9 is_stmt 0 view .LVU172
 661 0062 01A8     		add	r0, sp, #4
 662 0064 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 663              	.LVL35:
 284:Core/Src/main.c ****     {
 664              		.loc 1 284 8 view .LVU173
 665 0068 0028     		cmp	r0, #0
 666 006a 05D1     		bne	.L39
 288:Core/Src/main.c **** 
 667              		.loc 1 288 1 view .LVU174
 668 006c 17B0     		add	sp, sp, #92
 669              		@ sp needed
 670 006e 00BD     		pop	{pc}
 671              	.L37:
 269:Core/Src/main.c ****     }
 672              		.loc 1 269 9 is_stmt 1 view .LVU175
 673 0070 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccZBciSD.s 			page 24


 674              	.LVL36:
 675              	.L38:
 280:Core/Src/main.c ****     }
 676              		.loc 1 280 9 view .LVU176
 677 0074 FFF7FEFF 		bl	Error_Handler
 678              	.LVL37:
 679              	.L39:
 286:Core/Src/main.c ****     }
 680              		.loc 1 286 9 view .LVU177
 681 0078 FFF7FEFF 		bl	Error_Handler
 682              	.LVL38:
 683              		.cfi_endproc
 684              	.LFE44:
 686              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 687              		.align	2
 688              	.LC23:
 689 0000 203E3E20 		.ascii	" >> OK\000"
 689      4F4B00
 690              		.section	.text.main,"ax",%progbits
 691              		.align	1
 692              		.global	main
 693              		.syntax unified
 694              		.code	16
 695              		.thumb_func
 696              		.fpu softvfp
 698              	main:
 699              	.LFB43:
 156:Core/Src/main.c ****     /* USER CODE BEGIN 1 */
 700              		.loc 1 156 1 view -0
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 16
 703              		@ frame_needed = 0, uses_anonymous_args = 0
 704 0000 30B5     		push	{r4, r5, lr}
 705              	.LCFI8:
 706              		.cfi_def_cfa_offset 12
 707              		.cfi_offset 4, -12
 708              		.cfi_offset 5, -8
 709              		.cfi_offset 14, -4
 710 0002 85B0     		sub	sp, sp, #20
 711              	.LCFI9:
 712              		.cfi_def_cfa_offset 32
 164:Core/Src/main.c **** 
 713              		.loc 1 164 5 view .LVU179
 714 0004 FFF7FEFF 		bl	HAL_Init
 715              	.LVL39:
 171:Core/Src/main.c **** 
 716              		.loc 1 171 5 view .LVU180
 717 0008 FFF7FEFF 		bl	SystemClock_Config
 718              	.LVL40:
 178:Core/Src/main.c ****     MX_USART1_UART_Init();
 719              		.loc 1 178 5 view .LVU181
 720 000c FFF7FEFF 		bl	MX_GPIO_Init
 721              	.LVL41:
 179:Core/Src/main.c ****     /* USER CODE BEGIN 2 */
 722              		.loc 1 179 5 view .LVU182
 723 0010 FFF7FEFF 		bl	MX_USART1_UART_Init
 724              	.LVL42:
ARM GAS  /tmp/ccZBciSD.s 			page 25


 181:Core/Src/main.c ****     /* USER CODE END 2 */
 725              		.loc 1 181 5 view .LVU183
 726 0014 0122     		movs	r2, #1
 727 0016 3049     		ldr	r1, .L52
 728 0018 3048     		ldr	r0, .L52+4
 729 001a FFF7FEFF 		bl	HAL_UART_Receive_IT
 730              	.LVL43:
 186:Core/Src/main.c ****     int idx = 0;
 731              		.loc 1 186 5 view .LVU184
 186:Core/Src/main.c ****     int idx = 0;
 732              		.loc 1 186 10 is_stmt 0 view .LVU185
 733 001e 01AA     		add	r2, sp, #4
 734 0020 2F4B     		ldr	r3, .L52+8
 735 0022 1968     		ldr	r1, [r3]
 736 0024 0191     		str	r1, [sp, #4]
 737 0026 9988     		ldrh	r1, [r3, #4]
 738 0028 9180     		strh	r1, [r2, #4]
 739 002a 9B79     		ldrb	r3, [r3, #6]
 740 002c 9371     		strb	r3, [r2, #6]
 741 002e 0322     		movs	r2, #3
 742 0030 0021     		movs	r1, #0
 743 0032 0B20     		movs	r0, #11
 744 0034 6844     		add	r0, r0, sp
 745 0036 FFF7FEFF 		bl	memset
 746              	.LVL44:
 187:Core/Src/main.c ****     uint8_t delay_param = 1000;
 747              		.loc 1 187 5 is_stmt 1 view .LVU186
 188:Core/Src/main.c ****     while (1)
 748              		.loc 1 188 5 view .LVU187
 188:Core/Src/main.c ****     while (1)
 749              		.loc 1 188 5 is_stmt 0 view .LVU188
 750 003a 23E0     		b	.L48
 751              	.LVL45:
 752              	.L49:
 193:Core/Src/main.c ****             delay_param = 200;
 753              		.loc 1 193 13 is_stmt 1 view .LVU189
 754 003c 8021     		movs	r1, #128
 755 003e 8900     		lsls	r1, r1, #2
 756 0040 2848     		ldr	r0, .L52+12
 757 0042 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 758              	.LVL46:
 194:Core/Src/main.c ****             // HAL_Delay(2000);
 759              		.loc 1 194 13 view .LVU190
 194:Core/Src/main.c ****             // HAL_Delay(2000);
 760              		.loc 1 194 25 is_stmt 0 view .LVU191
 761 0046 C824     		movs	r4, #200
 762 0048 30E0     		b	.L42
 763              	.LVL47:
 764              	.L50:
 208:Core/Src/main.c ****             delay_param = 200;
 765              		.loc 1 208 13 is_stmt 1 view .LVU192
 766 004a 8021     		movs	r1, #128
 767 004c 4900     		lsls	r1, r1, #1
 768 004e 2548     		ldr	r0, .L52+12
 769 0050 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 770              	.LVL48:
 209:Core/Src/main.c ****         }
ARM GAS  /tmp/ccZBciSD.s 			page 26


 771              		.loc 1 209 13 view .LVU193
 209:Core/Src/main.c ****         }
 772              		.loc 1 209 25 is_stmt 0 view .LVU194
 773 0054 C824     		movs	r4, #200
 774 0056 29E0     		b	.L42
 775              	.LVL49:
 776              	.L51:
 213:Core/Src/main.c ****             HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 777              		.loc 1 213 13 is_stmt 1 view .LVU195
 778 0058 8021     		movs	r1, #128
 779 005a 224C     		ldr	r4, .L52+12
 780 005c 8900     		lsls	r1, r1, #2
 781 005e 2000     		movs	r0, r4
 782 0060 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 783              	.LVL50:
 214:Core/Src/main.c ****             delay_param = 20;
 784              		.loc 1 214 13 view .LVU196
 785 0064 8021     		movs	r1, #128
 786 0066 4900     		lsls	r1, r1, #1
 787 0068 2000     		movs	r0, r4
 788 006a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 789              	.LVL51:
 215:Core/Src/main.c ****         }
 790              		.loc 1 215 13 view .LVU197
 215:Core/Src/main.c ****         }
 791              		.loc 1 215 25 is_stmt 0 view .LVU198
 792 006e 1424     		movs	r4, #20
 793 0070 1CE0     		b	.L42
 794              	.LVL52:
 795              	.L46:
 796              	.LBB10:
 797              	.LBB11:
 233:Core/Src/main.c ****             }
 798              		.loc 1 233 17 is_stmt 1 view .LVU199
 799 0072 0A20     		movs	r0, #10
 800 0074 FFF7FEFF 		bl	putchar
 801              	.LVL53:
 802              	.L47:
 803              	.LBE11:
 236:Core/Src/main.c ****         }
 804              		.loc 1 236 13 view .LVU200
 236:Core/Src/main.c ****         }
 805              		.loc 1 236 27 is_stmt 0 view .LVU201
 806 0078 1B4B     		ldr	r3, .L52+16
 807 007a 0022     		movs	r2, #0
 808 007c 1A70     		strb	r2, [r3]
 809              	.L45:
 810              	.LBE10:
 239:Core/Src/main.c ****         /* USER CODE END WHILE */
 811              		.loc 1 239 9 is_stmt 1 view .LVU202
 812 007e 2000     		movs	r0, r4
 813 0080 FFF7FEFF 		bl	HAL_Delay
 814              	.LVL54:
 189:Core/Src/main.c ****     {
 815              		.loc 1 189 11 view .LVU203
 816              	.L48:
 189:Core/Src/main.c ****     {
ARM GAS  /tmp/ccZBciSD.s 			page 27


 817              		.loc 1 189 5 view .LVU204
 191:Core/Src/main.c ****         {
 818              		.loc 1 191 9 view .LVU205
 191:Core/Src/main.c ****         {
 819              		.loc 1 191 22 is_stmt 0 view .LVU206
 820 0084 194B     		ldr	r3, .L52+20
 821 0086 1B78     		ldrb	r3, [r3]
 191:Core/Src/main.c ****         {
 822              		.loc 1 191 12 view .LVU207
 823 0088 012B     		cmp	r3, #1
 824 008a D7D0     		beq	.L49
 206:Core/Src/main.c ****         {
 825              		.loc 1 206 14 is_stmt 1 view .LVU208
 206:Core/Src/main.c ****         {
 826              		.loc 1 206 17 is_stmt 0 view .LVU209
 827 008c 022B     		cmp	r3, #2
 828 008e DCD0     		beq	.L50
 211:Core/Src/main.c ****         {
 829              		.loc 1 211 14 is_stmt 1 view .LVU210
 211:Core/Src/main.c ****         {
 830              		.loc 1 211 17 is_stmt 0 view .LVU211
 831 0090 032B     		cmp	r3, #3
 832 0092 E1D0     		beq	.L51
 219:Core/Src/main.c ****             HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 833              		.loc 1 219 13 is_stmt 1 view .LVU212
 834 0094 8021     		movs	r1, #128
 835 0096 134C     		ldr	r4, .L52+12
 836 0098 4900     		lsls	r1, r1, #1
 837 009a 2000     		movs	r0, r4
 838 009c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 839              	.LVL55:
 220:Core/Src/main.c ****             delay_param = 1000;
 840              		.loc 1 220 13 view .LVU213
 841 00a0 8021     		movs	r1, #128
 842 00a2 8900     		lsls	r1, r1, #2
 843 00a4 2000     		movs	r0, r4
 844 00a6 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 845              	.LVL56:
 221:Core/Src/main.c ****         }
 846              		.loc 1 221 13 view .LVU214
 221:Core/Src/main.c ****         }
 847              		.loc 1 221 25 is_stmt 0 view .LVU215
 848 00aa E824     		movs	r4, #232
 849              	.LVL57:
 850              	.L42:
 224:Core/Src/main.c ****         {
 851              		.loc 1 224 9 is_stmt 1 view .LVU216
 224:Core/Src/main.c ****         {
 852              		.loc 1 224 27 is_stmt 0 view .LVU217
 853 00ac 0E4B     		ldr	r3, .L52+16
 854 00ae 1B78     		ldrb	r3, [r3]
 224:Core/Src/main.c ****         {
 855              		.loc 1 224 12 view .LVU218
 856 00b0 012B     		cmp	r3, #1
 857 00b2 E4D1     		bne	.L45
 858              	.LBB13:
 226:Core/Src/main.c ****             if (maintask != 0)
ARM GAS  /tmp/ccZBciSD.s 			page 28


 859              		.loc 1 226 13 is_stmt 1 view .LVU219
 226:Core/Src/main.c ****             if (maintask != 0)
 860              		.loc 1 226 63 is_stmt 0 view .LVU220
 861 00b4 0E4D     		ldr	r5, .L52+24
 862 00b6 2800     		movs	r0, r5
 863 00b8 FFF7FEFF 		bl	strlen
 864              	.LVL58:
 226:Core/Src/main.c ****             if (maintask != 0)
 865              		.loc 1 226 13 view .LVU221
 866 00bc 82B2     		uxth	r2, r0
 867 00be 6423     		movs	r3, #100
 868 00c0 2900     		movs	r1, r5
 869 00c2 0648     		ldr	r0, .L52+4
 870 00c4 FFF7FEFF 		bl	HAL_UART_Transmit
 871              	.LVL59:
 227:Core/Src/main.c ****             {
 872              		.loc 1 227 13 is_stmt 1 view .LVU222
 227:Core/Src/main.c ****             {
 873              		.loc 1 227 26 is_stmt 0 view .LVU223
 874 00c8 084B     		ldr	r3, .L52+20
 875 00ca 1B78     		ldrb	r3, [r3]
 227:Core/Src/main.c ****             {
 876              		.loc 1 227 16 view .LVU224
 877 00cc 002B     		cmp	r3, #0
 878 00ce D0D0     		beq	.L46
 879              	.LBB12:
 229:Core/Src/main.c ****             }
 880              		.loc 1 229 17 is_stmt 1 view .LVU225
 881 00d0 0848     		ldr	r0, .L52+28
 882 00d2 FFF7FEFF 		bl	puts
 883              	.LVL60:
 884              	.LBE12:
 885 00d6 CFE7     		b	.L47
 886              	.L53:
 887              		.align	2
 888              	.L52:
 889 00d8 00000000 		.word	.LANCHOR2
 890 00dc 00000000 		.word	huart1
 891 00e0 00000000 		.word	.LANCHOR6
 892 00e4 00080048 		.word	1207961600
 893 00e8 00000000 		.word	.LANCHOR3
 894 00ec 00000000 		.word	.LANCHOR4
 895 00f0 00000000 		.word	.LANCHOR0
 896 00f4 00000000 		.word	.LC23
 897              	.LBE13:
 898              		.cfi_endproc
 899              	.LFE43:
 901              		.global	maintask
 902              		.global	errorcode
 903              		.global	Rx_indx
 904              		.global	Transfer_cplt
 905              		.global	Rx_Buffer
 906              		.global	Rx_data
 907              		.global	huart1
 908              		.section	.rodata
 909              		.align	2
 910              		.set	.LANCHOR6,. + 0
ARM GAS  /tmp/ccZBciSD.s 			page 29


 911              	.LC18:
 912 0000 68656C6C 		.ascii	"hello\012\000"
 912      6F0A00
 913 0007 000000   		.space	3
 914              		.section	.bss.Rx_Buffer,"aw",%nobits
 915              		.align	2
 916              		.set	.LANCHOR0,. + 0
 919              	Rx_Buffer:
 920 0000 00000000 		.space	100
 920      00000000 
 920      00000000 
 920      00000000 
 920      00000000 
 921              		.section	.bss.Rx_data,"aw",%nobits
 922              		.align	2
 923              		.set	.LANCHOR2,. + 0
 926              	Rx_data:
 927 0000 0000     		.space	2
 928              		.section	.bss.Rx_indx,"aw",%nobits
 929              		.set	.LANCHOR1,. + 0
 932              	Rx_indx:
 933 0000 00       		.space	1
 934              		.section	.bss.Transfer_cplt,"aw",%nobits
 935              		.set	.LANCHOR3,. + 0
 938              	Transfer_cplt:
 939 0000 00       		.space	1
 940              		.section	.bss.errorcode,"aw",%nobits
 941              		.set	.LANCHOR5,. + 0
 944              	errorcode:
 945 0000 00       		.space	1
 946              		.section	.bss.huart1,"aw",%nobits
 947              		.align	2
 950              	huart1:
 951 0000 00000000 		.space	132
 951      00000000 
 951      00000000 
 951      00000000 
 951      00000000 
 952              		.section	.bss.maintask,"aw",%nobits
 953              		.set	.LANCHOR4,. + 0
 956              	maintask:
 957 0000 00       		.space	1
 958              		.text
 959              	.Letext0:
 960              		.file 3 "/home/quangnt/stm32/gcc-arm-none-eabi-10.3-2021.07/arm-none-eabi/include/machine/_default
 961              		.file 4 "/home/quangnt/stm32/gcc-arm-none-eabi-10.3-2021.07/arm-none-eabi/include/sys/_stdint.h"
 962              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 963              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 964              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 965              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 966              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 967              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 968              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 969              		.file 12 "<built-in>"
 970              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccZBciSD.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccZBciSD.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccZBciSD.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccZBciSD.s:135    .text.MX_GPIO_Init:0000000000000070 $d
     /tmp/ccZBciSD.s:141    .text._write:0000000000000000 $t
     /tmp/ccZBciSD.s:148    .text._write:0000000000000000 _write
     /tmp/ccZBciSD.s:183    .text._write:0000000000000014 $d
     /tmp/ccZBciSD.s:950    .bss.huart1:0000000000000000 huart1
     /tmp/ccZBciSD.s:188    .rodata.decode_cmd.str1.4:0000000000000000 $d
     /tmp/ccZBciSD.s:198    .text.decode_cmd:0000000000000000 $t
     /tmp/ccZBciSD.s:205    .text.decode_cmd:0000000000000000 decode_cmd
     /tmp/ccZBciSD.s:282    .text.decode_cmd:0000000000000050 $d
     /tmp/ccZBciSD.s:292    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccZBciSD.s:299    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccZBciSD.s:429    .text.HAL_UART_RxCpltCallback:0000000000000070 $d
     /tmp/ccZBciSD.s:441    .text.Error_Handler:0000000000000000 $t
     /tmp/ccZBciSD.s:448    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccZBciSD.s:480    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccZBciSD.s:486    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccZBciSD.s:550    .text.MX_USART1_UART_Init:0000000000000030 $d
     /tmp/ccZBciSD.s:556    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccZBciSD.s:563    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccZBciSD.s:687    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccZBciSD.s:691    .text.main:0000000000000000 $t
     /tmp/ccZBciSD.s:698    .text.main:0000000000000000 main
     /tmp/ccZBciSD.s:889    .text.main:00000000000000d8 $d
     /tmp/ccZBciSD.s:956    .bss.maintask:0000000000000000 maintask
     /tmp/ccZBciSD.s:944    .bss.errorcode:0000000000000000 errorcode
     /tmp/ccZBciSD.s:932    .bss.Rx_indx:0000000000000000 Rx_indx
     /tmp/ccZBciSD.s:938    .bss.Transfer_cplt:0000000000000000 Transfer_cplt
     /tmp/ccZBciSD.s:919    .bss.Rx_Buffer:0000000000000000 Rx_Buffer
     /tmp/ccZBciSD.s:926    .bss.Rx_data:0000000000000000 Rx_data
     /tmp/ccZBciSD.s:909    .rodata:0000000000000000 $d
     /tmp/ccZBciSD.s:915    .bss.Rx_Buffer:0000000000000000 $d
     /tmp/ccZBciSD.s:922    .bss.Rx_data:0000000000000000 $d
     /tmp/ccZBciSD.s:933    .bss.Rx_indx:0000000000000000 $d
     /tmp/ccZBciSD.s:939    .bss.Transfer_cplt:0000000000000000 $d
     /tmp/ccZBciSD.s:945    .bss.errorcode:0000000000000000 $d
     /tmp/ccZBciSD.s:947    .bss.huart1:0000000000000000 $d
     /tmp/ccZBciSD.s:957    .bss.maintask:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Transmit
strcmp
HAL_UART_Receive_IT
HAL_GPIO_TogglePin
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
putchar
HAL_Delay
ARM GAS  /tmp/ccZBciSD.s 			page 31


strlen
puts
